name: bitaxe-hashrate-benchmark

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: pip
      - name: Install dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: "src/requirements.txt"
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: ["ubuntu-22.04"]
    permissions:
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: "src/requirements.txt"
    - name: Run pylint
      run: |
        pylint src/
    - name: Run pytest
      run: |
        pytest tests/ --cov=src/ --cov-report=term-missing --cov-report=xml --cov-fail-under=90 --junitxml=pytest.xml -v > pytest-coverage.txt
    - name: Pytest coverage comment
      if: github.event_name == 'pull_request'
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml
  create-main-release:
    name: create main release
    runs-on: ${{ matrix.os }}
    needs:
      - build
      - sonarqube
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    steps:
    - uses: actions/checkout@v4
    - id: get_version
      run: |
        content=`cat version.json`
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        echo "::set-output name=packageJson::$content"
    - name: Create a Release
      uses: elgohr/Github-Release-Action@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        title: ${{fromJson(steps.get_version.outputs.packageJson).version}}
